{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistList/todolists-reducer.ts","features/TodolistList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Todolist.tsx","features/TodolistList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskId","model","authAPI","args","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetwork","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","clearTodosDataAC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","id","updateTodolistTC","createTodolistTC","todolist","item","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","createTaskTC","task","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","tasksReducer","forEach","todoListId","AddItemForm","React","memo","disabled","props","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","activateViewMode","autoFocus","onBlur","key","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","removeTask","useSelector","onClickHandler","useDispatch","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","className","Checkbox","Delete","Todolist","demo","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","style","paddingTop","Button","TodolistsList","auth","useEffect","changeStatus","thunk","newTitle","addTodolist","Grid","container","padding","spacing","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","setFieldError","field","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","width","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.528050ae.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\n//types>>>>>>\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n\n}\nexport type FieldErrorType = { field: string, error: string };\n\nexport type BaseResponseType<D = {}> = {\n    resultCode: 0\n    messages: string[]\n    fieldsErrors: Array<FieldErrorType>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType =  {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\nexport type GetTasksResponse = {\n    items: TaskType[]\n    totalCount: number\n    error: string | null\n}\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\n//api>>>>>>>\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'b588c31f-bc7d-4fbb-8788-c7e4777eca7b'\n    }\n})\n\nexport const todolistsAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists')\n    },\n    createTodolist(title: string) {\n        return instance.post<BaseResponseType<{ item: TodolistType }>>('todo-lists', {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<BaseResponseType>(`todo-lists/${todolistId}`)\n    },\n    updateTodolistTitle(todolistId: string, title: string) {\n        return instance.put<BaseResponseType>(`todo-lists/${todolistId}`, {title})\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<BaseResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<BaseResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<BaseResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`,  model)\n    },\n}\n\nexport const authAPI = {\n    login(args: LoginParamsType) {\n        return instance.post<BaseResponseType<{userId: number}>>('auth/login', args)\n    },\n    me() {\n        return instance.get<BaseResponseType<{id: number, email: string, login: string}>>('auth/me')\n    },\n    logout() {\n        return instance.delete<BaseResponseType>('auth/login')\n    }\n}","import {BaseResponseType} from \"../api/todolists-api\";\nimport {\n    setAppErrorAC,\n    setAppStatusAC,\n} from \"../app/app-reducer\";\n\nimport {Dispatch} from \"redux\";\n\nexport const handleServerAppError = <D>(data: BaseResponseType<D>, dispatch: Dispatch) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC({error: data.messages[0]}))\n    } else {\n        dispatch(setAppErrorAC({error: 'Some error 😠'}))\n    }\n    dispatch(setAppStatusAC({status: 'failed'}))\n}\n\nexport const handleServerNetwork = (error: { message: string }, dispatch: Dispatch) => {\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\n    dispatch(setAppStatusAC({status: 'failed'}))\n}","import {Dispatch} from 'redux'\nimport {setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetwork} from \"../../utils/error-utils\";\nimport {clearTodosDataAC} from \"../TodolistList/todolists-reducer\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n//initial state >>>>>>\n\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, {\n    rejectValue: {errors: Array<string>, fieldsErrors?: Array<FieldErrorType>}\n}>('auth/login', async (param, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n\n    try {\n        const res = await authAPI.login(param)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\n            return\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\n        }\n    } catch (error: any) {\n        handleServerNetwork({message: error}, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({errors: [error], fieldsErrors: undefined})\n    }\n\n})\n\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n\n    try {\n        const res = await authAPI.logout()\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\n            thunkAPI.dispatch(clearTodosDataAC())\n            return\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue( {errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\n        }\n    } catch (error: any) {\n        handleServerNetwork({message: error}, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({})\n    }\n\n})\n\n\n\n\nconst slice = createSlice({\n    name: 'auth',\n    initialState: {\n        isLoggedIn: false\n    },\n    reducers: {\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\n            state.isLoggedIn = action.payload.value\n        }\n    },\n    extraReducers: builder => {\n        builder.addCase(loginTC.fulfilled, (state) => {\n            state.isLoggedIn = true\n        })\n        builder.addCase(logoutTC.fulfilled, (state) => {\n            state.isLoggedIn = false\n        })\n    }\n})\n\nexport const authReducer = slice.reducer\nexport const {setIsLoggedInAC} = slice.actions\n\n// thunks >>>>>>","import {authAPI} from \"../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\nimport {handleServerAppError, handleServerNetwork} from \"../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\n//types >>>>>>\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type InitialStateType = {\n    status: RequestStatusType,\n    error: string | null,\n    isInitialized: boolean\n}\n\n//thunks >>>>>>\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\n    try {\n        const res = await authAPI.me()\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC({value: true}))\n        }  else {\n            handleServerAppError(res.data, dispatch)\n        }\n    } catch (error: any) {\n        handleServerNetwork({message: error}, dispatch)\n    }\n\n})\n\n\n//slice >>>>>>\n\nconst slice = createSlice({\n    name: 'app',\n    initialState: {\n        status: 'idle',\n        error: null,\n        isInitialized: false\n    } as InitialStateType,\n    reducers: {\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\n            state.error = action.payload.error\n        },\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\n            state.status = action.payload.status\n        }\n    },\n    extraReducers: builder => {\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\n            state.isInitialized = true\n        })\n    }\n})\n\nexport const appReducer = slice.reducer\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\n\n\n\n\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\n\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerNetwork} from \"../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n//types>>>>>>>>>\nexport type clearTodosDataType = ReturnType<typeof clearTodosDataAC>\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n\n//thunks>>>>>>>>\n\n\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (param, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    const res = await todolistsAPI.getTodolists()\n    try {\n        dispatch(setAppStatusAC({status: 'succeeded'}))\n        return {todolists: res.data}\n    } catch (error: any) {\n        handleServerNetwork(error, dispatch)\n        return rejectWithValue(null)\n    }\n\n})\n\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\n    try {\n        const res = await todolistsAPI.deleteTodolist(todolistId)\n        dispatch(setAppStatusAC({status: 'succeeded'}))\n        return {todolistId: todolistId}\n    } catch (error: any) {\n        handleServerNetwork(error, dispatch)\n        return rejectWithValue(null)\n    }\n})\n\nexport const updateTodolistTC = createAsyncThunk('todolists/updateTodolist', async (param: { id: string, title: string }, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n\n    try {\n        const res = await todolistsAPI.updateTodolistTitle(param.id, param.title)\n        dispatch(setAppStatusAC({status: 'succeeded'}))\n        return {id: param.id, title: param.title}\n    } catch (error: any) {\n        handleServerNetwork(error, dispatch)\n        return rejectWithValue(null)\n    }\n})\n\nexport const createTodolistTC = createAsyncThunk('todolists/createTodolist', async (title: string, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    try {\n        const res = await todolistsAPI.createTodolist(title)\n        dispatch(setAppStatusAC({status: 'succeeded'}))\n        return {todolist: res.data.data.item}\n    } catch (error: any) {\n        handleServerNetwork(error, dispatch)\n        return rejectWithValue(null)\n    }\n})\n\n\n//slice>>>>>>>>>\nconst slice = createSlice({\n    name: 'todolists',\n    initialState: [] as Array<TodolistDomainType>,\n    reducers: {\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\n            // if we want to use Update Pattern from immer js\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            if (index > -1) {\n                state[index].filter = action.payload.filter\n            }\n        },\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\n            // if we want to use Update Pattern from immer js\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            if (index > -1) {\n                state[index].entityStatus = action.payload.status\n            }\n        },\n        clearTodosDataAC(state, action: PayloadAction) {\n            state = []\n        }\n    },\n    extraReducers: builder => {\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n        })\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\n            if (index > -1) {\n                state.splice(index, 1)\n            }\n        })\n        builder.addCase(createTodolistTC.fulfilled, (state, action) => {\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\n        })\n        builder.addCase(updateTodolistTC.fulfilled, (state, action) => {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            if (index > -1) {\n                state[index].title = action.payload.title\n            }\n        })\n    }\n})\n\nexport const {\n    changeTodolistFilterAC,\n    changeTodolistEntityStatusAC,\n    clearTodosDataAC\n} = slice.actions\nexport const todolistsReducer = slice.reducer\n\n\n\n\n\n","import {\n    createTodolistTC,\n    fetchTodolistsTC, removeTodolistTC\n} from './todolists-reducer';\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetwork} from \"../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\n// types>>>>>>>>>\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\nconst initialState: TasksStateType = {}\n\n//thunks>>>>>>>>>>>>>>>\n\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, {dispatch}) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    const res = await todolistsAPI.getTasks(todolistId)\n    const tasks = res.data.items\n    dispatch(setAppStatusAC({status: 'succeeded'}))\n    return {tasks, todolistId}\n})\n\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, {dispatch}) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\n    return {taskId: param.taskId, todolistId: param.todolistId}\n\n})\n\nexport const createTaskTC = createAsyncThunk('tasks/createTask', async (param: { todolistId: string, title: string }, {\n    dispatch,\n    rejectWithValue\n}) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    try {\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\n        if (res.data.resultCode === 0) {\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n            const task = res.data.data.item\n            return task\n        } else {\n            handleServerAppError(res.data, dispatch)\n            return rejectWithValue(null)\n        }\n    } catch (error: any) {\n        handleServerNetwork(error, dispatch)\n        return rejectWithValue(null)\n    }\n})\n\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async(param: {taskId: string, model: UpdateDomainTaskModelType, todolistId: string},\n                                                                       {dispatch, getState, rejectWithValue}) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n\n    const state = getState() as AppRootStateType\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\n    if (!task) {\n        return rejectWithValue('task not found in the state')\n    }\n    const apiModel: UpdateTaskModelType = {\n        deadline: task.deadline,\n        description: task.description,\n        priority: task.priority,\n        startDate: task.startDate,\n        title: task.title,\n        status: task.status,\n        ...param.model\n    }\n\n    try {\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\n        if (res.data.resultCode === 0) {\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n            return param\n        } else {\n            handleServerAppError(res.data, dispatch)\n            return rejectWithValue(null)\n        }\n    } catch(error: any) {\n        handleServerNetwork(error, dispatch)\n        return rejectWithValue(null)\n    }\n})\n\n\nconst slice = createSlice({\n    name: 'tasks',\n    initialState,\n    reducers: {\n        clearTodosDataAC(state, action: PayloadAction) {\n            state = {}\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(createTodolistTC.fulfilled, (state, action) => {\n            state[action.payload.todolist.id] = []\n        });\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\n            delete state[action.payload.todolistId]\n        });\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\n            action.payload.todolists.forEach(tl => {\n                state[tl.id] = []\n            })\n        });\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\n            state[action.payload.todolistId] = action.payload.tasks\n        });\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > -1) {\n                tasks.splice(index, 1)\n            }\n        });\n        builder.addCase(createTaskTC.fulfilled, (state, action) => {\n            state[action.payload.todoListId].unshift(action.payload)\n        });\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > -1) {\n                tasks[index] = {...tasks[index], ...action.payload.model}\n            }\n        });\n    }\n})\n\nexport const tasksReducer = slice.reducer\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(({disabled = false, ...props}: AddItemFormPropsType) => {\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n                   disabled={disabled}\n        />\n        <IconButton color=\"primary\" onClick={addItem} disabled={disabled}>\n            <AddBox />\n        </IconButton>\n    </div>\n})\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if(e.key === 'Enter'){\n            activateViewMode()\n        }\n    }\n\n    return editMode\n        ?    <TextField\n            value={title}\n            onChange={changeTitle}\n            autoFocus\n            onBlur={activateViewMode}\n            onKeyPress={onKeyPressHandler}\n        />\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n})\n","import React, {ChangeEvent, useCallback} from 'react';\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../../app/store\";\nimport {\n    removeTaskTC\n} from \"../../tasks-reducer\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\n\n\nexport type TaskPropsType = {\n    todolistId: string\n    taskId: string\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n}\n\nexport const Task = React.memo(({\n                                    todolistId,\n                                    taskId,\n                                    changeTaskStatus,\n                                    changeTaskTitle,\n                                    removeTask\n                                }: TaskPropsType) => {\n\n    const task = useSelector<AppRootStateType, TaskType>(state => state.tasks[todolistId]\n        .filter(task => task.id === taskId)[0])\n\n    const dispatch = useDispatch()\n\n    const onClickHandler = useCallback(() => removeTask(taskId, todolistId), [taskId, todolistId])\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        changeTaskStatus(taskId, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId);\n    }, [taskId, todolistId])\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        changeTaskTitle(task.id, newValue, todolistId)\n    }, [taskId, todolistId])\n\n\n    return (\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\n            <Checkbox\n                checked={task.status === TaskStatuses.Completed}\n                color=\"primary\"\n                onChange={onChangeHandler}\n            />\n\n            <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\n            <IconButton onClick={onClickHandler}>\n                <Delete/>\n            </IconButton>\n        </div>\n    );\n})","import React, {useCallback, useEffect} from 'react';\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\nimport {Button, IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\n\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses, TaskType, todolistsAPI} from \"../../../api/todolists-api\";\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchTasksTC} from \"../tasks-reducer\";\n\ntype PropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    demo?: boolean\n}\n\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\n\n    const dispatch = useDispatch()\n\n    // useEffect(() => {\n    //     if(demo){\n    //         return\n    //     }\n    //     dispatch(fetchTasksTC(props.todolist.id))\n    // }, [])\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.todolist.id);\n    },[props.addTask, props.todolist.id])\n\n    const removeTodolist = useCallback(() => {\n        props.removeTodolist(props.todolist.id);\n    }, [props.removeTodolist, props.todolist.id])\n    const changeTodolistTitle = useCallback ((title: string) => {\n        props.changeTodolistTitle(props.todolist.id, title);\n    }, [props.changeTodolistTitle, props.todolist.id])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.todolist.id), [props.todolist.id, props.changeFilter]);\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.todolist.id), [props.todolist.id, props.changeFilter]);\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.todolist.id), [props.todolist.id, props.changeFilter]);\n\n    let tasksForTodolist = props.tasks;\n\n\n    if (props.todolist.filter === \"active\") {\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\n    }\n    if (props.todolist.filter === \"completed\") {\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\n    }\n\n    return <div>\n        <h3> <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\n                <Delete />\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading' }/>\n        <div>\n            {\n                tasksForTodolist.map(t => {\n                    return <Task\n                        key={t.id}\n                        todolistId={props.todolist.id}\n                        taskId={t.id}\n                        changeTaskStatus={props.changeTaskStatus}\n                        changeTaskTitle={props.changeTaskTitle}\n                        removeTask={props.removeTask}\n                    />\n                })\n            }\n        </div>\n        <div style={{ paddingTop: \"10px\"}}>\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'default'}\n            >All\n            </Button>\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {\n    changeTodolistFilterAC,\n    createTodolistTC,\n    fetchTodolistsTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType,\n    updateTodolistTC\n} from \"./todolists-reducer\";\nimport {createTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {TaskStatuses} from \"../../api/todolists-api\";\nimport {Navigate} from \"react-router-dom\";\n\ntype TodolistListPropsType = {\n    demo?: boolean\n}\nexport const TodolistsList = ({demo = false}: TodolistListPropsType) => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if(demo || !isLoggedIn) {\n            return\n        }\n        dispatch(fetchTodolistsTC())\n    }, [])\n\n\n    const addTask = useCallback((title: string, todolistId: string) => {\n        dispatch(createTaskTC({todolistId, title}));\n    }, [dispatch])\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        const thunk = updateTaskTC({taskId: id, todolistId, model: {status}})\n        dispatch(thunk)\n    }, [])\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const thunk = updateTaskTC({taskId: id, todolistId, model: {title: newTitle}})\n        dispatch(thunk)\n    }, [])\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const thunk = removeTaskTC({taskId: id, todolistId})\n        dispatch(thunk)\n    }, [])\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\n        const action = changeTodolistFilterAC({id: todolistId, filter: value});\n        dispatch(action);\n    }, [dispatch])\n\n    const removeTodolist = useCallback((id: string) => {\n        dispatch(removeTodolistTC(id));\n    }, [dispatch])\n\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\n        dispatch(updateTodolistTC({id, title}))\n    }, [dispatch])\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(createTodolistTC(title))\n    }, [dispatch])\n\n    if(!isLoggedIn) {\n        return <Navigate to={'/login'}/>\n    }\n\n    return (\n        <>\n            <Grid container style={{padding: \"20px\"}}>\n                <AddItemForm addItem={addTodolist}/>\n            </Grid>\n            <Grid container spacing={3}>\n                {\n                    todolists.map(tl => {\n                        return <Grid item key={tl.id}>\n                            <Paper style={{padding:   \"10px\"}}>\n                                <Todolist\n                                    todolist={tl}\n                                    tasks={tasks[tl.id]}\n                                    changeFilter={changeFilter}\n                                    changeTaskStatus={changeStatus}\n                                    changeTaskTitle={changeTaskTitle}\n                                    addTask={addTask}\n                                    removeTodolist={removeTodolist}\n                                    changeTodolistTitle={changeTodolistTitle}\n                                    removeTask={removeTask}\n                                    demo={demo}\n                                />\n                            </Paper>\n                        </Grid>\n                    })\n                }\n            </Grid>\n        </>\n    )\n}","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n    // const [open, setOpen] = useState(true);\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC({error: null}));\n    };\n\n\n    return (\n        <Snackbar open={error != null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" >\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import {tasksReducer} from '../features/TodolistList/tasks-reducer';\nimport {todolistsReducer} from '../features/TodolistList/todolists-reducer';\nimport {combineReducers} from 'redux';\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\nimport {useDispatch} from \"react-redux\";\n\n\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer,\n})\n\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\n})\n\nexport type RootReducerType = typeof rootReducer\nexport type AppRootStateType = ReturnType<RootReducerType>\n\n// in order to apply to store in object window in any moment\n// @ts-ignore\nwindow.store = store;\n\ntype AppDispatchType = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\n","import React from 'react'\nimport {\n    Button,\n    Checkbox,\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    FormLabel,\n    Grid,\n    TextField\n} from \"@material-ui/core\";\nimport {FormikHelpers, useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType, useAppDispatch} from \"../../app/store\";\nimport {Navigate} from \"react-router-dom\";\n\nexport type FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\ntype FormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport const Login = () => {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const dispatch = useAppDispatch()\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length <= 2) {\n                errors.password = 'The length of password must be 3 or more';\n            }\n            return errors;\n        },\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\n            const res = await dispatch(loginTC(values))\n            if(loginTC.rejected.match(res)){\n                if(res.payload?.fieldsErrors?.length){\n                   const error = res.payload?.fieldsErrors[0]\n                    formikHelpers.setFieldError(error.field, error.error)\n                }\n\n            }\n\n            formik.resetForm();\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Navigate to={'/'}/>\n    }\n\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"email\")}\n                            onBlur={formik.handleBlur}\n                        />\n                        {formik.touched.email && formik.errors.email ?\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"password\")}\n                            onBlur={formik.handleBlur}\n                        />\n                        {formik.touched.password && formik.errors.password ?\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox\n                                {...formik.getFieldProps(\"rememberMe\")}\n                            />}\n\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from '@material-ui/core';\nimport {Menu} from '@material-ui/icons';\nimport {TodolistsList} from \"../features/TodolistList/TodolistsList\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\nimport {Routes, Route, Navigate} from \"react-router-dom\";\nimport {Login} from \"../features/Login/Login\";\nimport {logoutTC} from \"../features/Login/auth-reducer\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [])\n\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n\n    const logoutHandler = useCallback(() =>{\n        dispatch(logoutTC())\n    }, [])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress color='secondary'/>\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\n                </Toolbar>\n            </AppBar>\n            {status === 'loading' && <LinearProgress color='secondary'/>}\n            <Container fixed>\n                <Routes>\n                    <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\n                    <Route path={'/login'} element={<Login/>}/>\n                    <Route path='/404' element={<h1 style={{textAlign: \"center\"}}>404: PAGE NOT FOUND</h1>}/>\n                    <Route path='/*' element={<Navigate to={'/404'}/>}/>\n                </Routes>\n\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app/App';\nimport {store} from './app/store';\nimport {Provider} from 'react-redux';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}